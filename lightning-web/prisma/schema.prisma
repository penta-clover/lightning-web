generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id               String         @id @default(uuid()) // UUID 기본값
  nickname         String         @db.VarChar(50)      // VARCHAR(50)
  socialType       SocialType                         // Enum 타입
  socialId         String         @db.VarChar(50)     // VARCHAR(50)
  email            String         @db.VarChar(100)    // VARCHAR(100)
  profileImageUrl  String         @default("profile/default.svg") @db.VarChar(200)
  createdAt        DateTime       @default(now())      // TIMESTAMP
  lastLoginAt      DateTime       @default(now())      // TIMESTAMP
  alarmAllowed     Boolean        @default(false)      // BOOLEAN
  role             Role                                // Enum 타입
  blockLevel       BlockLevel     @default(NONE)       // Enum 타입
  phoneNumber      String?        @db.VarChar(20)      // VARCHAR(20)
  favoriteTeam     String?        @db.VarChar(50)      // VARCHAR(50)
  name             String?        @db.VarChar(50)      // VARCHAR
  gender           String?        @db.VarChar(10)      // VARCHAR(10)
  birthYear        Int?           @db.Integer          // INTEGER

  // chatMessages     ChatMessage[]   // 관계: 보낸 메시지
  lightningsSent   Lightning[]    @relation("LightningsSent")   // 관계: 보낸 번개
  lightningsReceived Lightning[]  @relation("LightningsReceived") // 관계: 받은 번개

  @@unique([socialType, socialId])
}

enum BlockLevel {
  DISABLED
  INVISIBLE
  BLOCKED
  TRANSPARENT
  NONE
}

enum SocialType {
  // social_type_enum의 실제 값 추가
  LOCAL
  GOOGLE
  KAKAO
  APPLE
}

enum Role {
  ADMIN
  USER
  INFLUENCER
  DUMMY
  DISABLED_DUMMY
}

// model ChatRoom {
//   id            String        @id @default(uuid()) // UUID 기본값
//   title         String        @db.VarChar(100)     // VARCHAR(100)
//   roomStatus    RoomStatus                  // Enum 타입

//   chatMessages  ChatMessage[]  // 관계: ChatRoom은 여러 메시지를 가질 수 있음
// }

enum RoomStatus {
  RESERVED
  OPENED
  CLOSED
}

// model ChatMessage {
//   id        String    @id @default(uuid()) // UUID 기본값
//   roomId    String    @db.VarChar(50)      // VARCHAR(50)
//   senderId  String    @db.VarChar(50)      // VARCHAR(50)
//   message   String    @db.Text            // TEXT
//   createdAt DateTime  @default(now())      // TIMESTAMP

//   sender   Member     @relation(fields: [senderId], references: [id]) // 관계: 보낸 메시지
//   chatRoom ChatRoom   @relation(fields: [roomId], references: [id]) // 관계: ChatRoom에 대한 메시지
//   lightnings Lightning[] // 관계: 번개에 대한 메시지
// }

model Lightning {
  id          String     @id @default(uuid()) // UUID 기본값
  senderId    String     @db.VarChar(50)      // VARCHAR(50)
  receiverId  String     @db.VarChar(50)      // VARCHAR(50)
  messageId   String     @db.VarChar(50)      // VARCHAR(50)
  createdAt  DateTime    @default(now())      // TIMESTAMP

  sender     Member      @relation("LightningsSent", fields: [senderId], references: [id]) // 관계: 보낸 번개
  receiver   Member      @relation("LightningsReceived", fields: [receiverId], references: [id]) // 관계: 받은 번개
  // message    ChatMessage @relation(fields: [messageId], references: [id]) // 관계: 번개에 대한 메시지
}

model NotificationClick {
  id         String     @id @default(uuid()) // UUID 기본값
  memberId    String     @db.VarChar(50)      // VARCHAR(50)
  createdAt  DateTime    @default(now())      // TIMESTAMP
}

model InfluencerSetting {
  id                  String     @id @default(uuid()) // UUID 기본값
  memberId            String     @db.VarChar(50)
  channelName         String     @db.VarChar(150)
  channelUrl          String     @db.VarChar(200)
  ctaOnChat           String     @db.VarChar(150)
  introductionOnChat  String     @db.VarChar(150)
}